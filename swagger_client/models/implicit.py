# coding: utf-8

"""
    API Manager API v1.3

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.3.0
    Contact: support@axway.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.login_endpoint import LoginEndpoint  # noqa: F401,E501
from swagger_client.models.schema_object import SchemaObject  # noqa: F401,E501


class Implicit(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'title': 'str',
        'description': 'str',
        'format': 'str',
        'required': 'list[str]',
        'properties': 'dict(str, SchemaObject)',
        'items': 'SchemaObject',
        'example': 'object',
        'discriminator': 'str',
        'login_endpoint': 'LoginEndpoint',
        'token_name': 'str',
        'ref': 'str',
        'default': 'object',
        'type': 'str',
        'enum': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'title': 'title',
        'description': 'description',
        'format': 'format',
        'required': 'required',
        'properties': 'properties',
        'items': 'items',
        'example': 'example',
        'discriminator': 'discriminator',
        'login_endpoint': 'loginEndpoint',
        'token_name': 'tokenName',
        'ref': '$ref',
        'default': 'default',
        'type': 'type',
        'enum': 'enum'
    }

    def __init__(self, id=None, title=None, description=None, format=None, required=None, properties=None, items=None, example=None, discriminator=None, login_endpoint=None, token_name=None, ref=None, default=None, type=None, enum=None):  # noqa: E501
        """Implicit - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._title = None
        self._description = None
        self._format = None
        self._required = None
        self._properties = None
        self._items = None
        self._example = None
        self._discriminator = None
        self._login_endpoint = None
        self._token_name = None
        self._ref = None
        self._default = None
        self._type = None
        self._enum = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if title is not None:
            self.title = title
        if description is not None:
            self.description = description
        if format is not None:
            self.format = format
        if required is not None:
            self.required = required
        if properties is not None:
            self.properties = properties
        if items is not None:
            self.items = items
        if example is not None:
            self.example = example
        if discriminator is not None:
            self.discriminator = discriminator
        if login_endpoint is not None:
            self.login_endpoint = login_endpoint
        if token_name is not None:
            self.token_name = token_name
        if ref is not None:
            self.ref = ref
        if default is not None:
            self.default = default
        if type is not None:
            self.type = type
        if enum is not None:
            self.enum = enum

    @property
    def id(self):
        """Gets the id of this Implicit.  # noqa: E501

        An identifier  # noqa: E501

        :return: The id of this Implicit.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Implicit.

        An identifier  # noqa: E501

        :param id: The id of this Implicit.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def title(self):
        """Gets the title of this Implicit.  # noqa: E501

        Schema title  # noqa: E501

        :return: The title of this Implicit.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Implicit.

        Schema title  # noqa: E501

        :param title: The title of this Implicit.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def description(self):
        """Gets the description of this Implicit.  # noqa: E501

        Description of the Schema  # noqa: E501

        :return: The description of this Implicit.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Implicit.

        Description of the Schema  # noqa: E501

        :param description: The description of this Implicit.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def format(self):
        """Gets the format of this Implicit.  # noqa: E501

        The format ex: int32, int64, float, double, byte, binary, date, date-time or password  # noqa: E501

        :return: The format of this Implicit.  # noqa: E501
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this Implicit.

        The format ex: int32, int64, float, double, byte, binary, date, date-time or password  # noqa: E501

        :param format: The format of this Implicit.  # noqa: E501
        :type: str
        """

        self._format = format

    @property
    def required(self):
        """Gets the required of this Implicit.  # noqa: E501

        Specifies if the parameter is required  # noqa: E501

        :return: The required of this Implicit.  # noqa: E501
        :rtype: list[str]
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this Implicit.

        Specifies if the parameter is required  # noqa: E501

        :param required: The required of this Implicit.  # noqa: E501
        :type: list[str]
        """

        self._required = required

    @property
    def properties(self):
        """Gets the properties of this Implicit.  # noqa: E501

        Not used beacause our model does not support inline nested types  # noqa: E501

        :return: The properties of this Implicit.  # noqa: E501
        :rtype: dict(str, SchemaObject)
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this Implicit.

        Not used beacause our model does not support inline nested types  # noqa: E501

        :param properties: The properties of this Implicit.  # noqa: E501
        :type: dict(str, SchemaObject)
        """

        self._properties = properties

    @property
    def items(self):
        """Gets the items of this Implicit.  # noqa: E501

        if the schema is an array specifies the items type  # noqa: E501

        :return: The items of this Implicit.  # noqa: E501
        :rtype: SchemaObject
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this Implicit.

        if the schema is an array specifies the items type  # noqa: E501

        :param items: The items of this Implicit.  # noqa: E501
        :type: SchemaObject
        """

        self._items = items

    @property
    def example(self):
        """Gets the example of this Implicit.  # noqa: E501

        if the schema is an array specifies the items type  # noqa: E501

        :return: The example of this Implicit.  # noqa: E501
        :rtype: object
        """
        return self._example

    @example.setter
    def example(self, example):
        """Sets the example of this Implicit.

        if the schema is an array specifies the items type  # noqa: E501

        :param example: The example of this Implicit.  # noqa: E501
        :type: object
        """

        self._example = example

    @property
    def discriminator(self):
        """Gets the discriminator of this Implicit.  # noqa: E501


        :return: The discriminator of this Implicit.  # noqa: E501
        :rtype: str
        """
        return self._discriminator

    @discriminator.setter
    def discriminator(self, discriminator):
        """Sets the discriminator of this Implicit.


        :param discriminator: The discriminator of this Implicit.  # noqa: E501
        :type: str
        """

        self._discriminator = discriminator

    @property
    def login_endpoint(self):
        """Gets the login_endpoint of this Implicit.  # noqa: E501

        The login endpoint definition.  # noqa: E501

        :return: The login_endpoint of this Implicit.  # noqa: E501
        :rtype: LoginEndpoint
        """
        return self._login_endpoint

    @login_endpoint.setter
    def login_endpoint(self, login_endpoint):
        """Sets the login_endpoint of this Implicit.

        The login endpoint definition.  # noqa: E501

        :param login_endpoint: The login_endpoint of this Implicit.  # noqa: E501
        :type: LoginEndpoint
        """

        self._login_endpoint = login_endpoint

    @property
    def token_name(self):
        """Gets the token_name of this Implicit.  # noqa: E501

        An optional alternative name to standard 'access_token' OAuth2 parameter.  # noqa: E501

        :return: The token_name of this Implicit.  # noqa: E501
        :rtype: str
        """
        return self._token_name

    @token_name.setter
    def token_name(self, token_name):
        """Sets the token_name of this Implicit.

        An optional alternative name to standard 'access_token' OAuth2 parameter.  # noqa: E501

        :param token_name: The token_name of this Implicit.  # noqa: E501
        :type: str
        """

        self._token_name = token_name

    @property
    def ref(self):
        """Gets the ref of this Implicit.  # noqa: E501

        A Reference to a definition on definitions object  # noqa: E501

        :return: The ref of this Implicit.  # noqa: E501
        :rtype: str
        """
        return self._ref

    @ref.setter
    def ref(self, ref):
        """Sets the ref of this Implicit.

        A Reference to a definition on definitions object  # noqa: E501

        :param ref: The ref of this Implicit.  # noqa: E501
        :type: str
        """

        self._ref = ref

    @property
    def default(self):
        """Gets the default of this Implicit.  # noqa: E501

        Default value for this schema if it is applicable  # noqa: E501

        :return: The default of this Implicit.  # noqa: E501
        :rtype: object
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this Implicit.

        Default value for this schema if it is applicable  # noqa: E501

        :param default: The default of this Implicit.  # noqa: E501
        :type: object
        """

        self._default = default

    @property
    def type(self):
        """Gets the type of this Implicit.  # noqa: E501

        The type ex: array , boolean, integer , null , number, object, string  # noqa: E501

        :return: The type of this Implicit.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Implicit.

        The type ex: array , boolean, integer , null , number, object, string  # noqa: E501

        :param type: The type of this Implicit.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def enum(self):
        """Gets the enum of this Implicit.  # noqa: E501


        :return: The enum of this Implicit.  # noqa: E501
        :rtype: list[str]
        """
        return self._enum

    @enum.setter
    def enum(self, enum):
        """Sets the enum of this Implicit.


        :param enum: The enum of this Implicit.  # noqa: E501
        :type: list[str]
        """

        self._enum = enum

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Implicit, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Implicit):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
