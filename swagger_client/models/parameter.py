# coding: utf-8

"""
    API Manager API v1.3

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.3.0
    Contact: support@axway.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.schema_object import SchemaObject  # noqa: F401,E501


class Parameter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'type': 'str',
        'format': 'str',
        'description': 'str',
        'required': 'bool',
        'allow_multiple': 'bool',
        'items': 'SchemaObject',
        'default_value': 'str',
        'schema': 'SchemaObject',
        'param_type': 'str'
    }

    attribute_map = {
        'name': 'name',
        'type': 'type',
        'format': 'format',
        'description': 'description',
        'required': 'required',
        'allow_multiple': 'allowMultiple',
        'items': 'items',
        'default_value': 'defaultValue',
        'schema': 'schema',
        'param_type': 'paramType'
    }

    def __init__(self, name=None, type=None, format=None, description=None, required=False, allow_multiple=False, items=None, default_value=None, schema=None, param_type=None):  # noqa: E501
        """Parameter - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._type = None
        self._format = None
        self._description = None
        self._required = None
        self._allow_multiple = None
        self._items = None
        self._default_value = None
        self._schema = None
        self._param_type = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if type is not None:
            self.type = type
        if format is not None:
            self.format = format
        if description is not None:
            self.description = description
        if required is not None:
            self.required = required
        if allow_multiple is not None:
            self.allow_multiple = allow_multiple
        if items is not None:
            self.items = items
        if default_value is not None:
            self.default_value = default_value
        if schema is not None:
            self.schema = schema
        if param_type is not None:
            self.param_type = param_type

    @property
    def name(self):
        """Gets the name of this Parameter.  # noqa: E501

        The parameter name.  # noqa: E501

        :return: The name of this Parameter.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Parameter.

        The parameter name.  # noqa: E501

        :param name: The name of this Parameter.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this Parameter.  # noqa: E501

        The parameter data type, e.g. *boolean*, *byte*, *date*, *double*, *float*, *integer*, *long*, *string*, or a type name found in [APIDefinition models](APIDefinition.html#models).  # noqa: E501

        :return: The type of this Parameter.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Parameter.

        The parameter data type, e.g. *boolean*, *byte*, *date*, *double*, *float*, *integer*, *long*, *string*, or a type name found in [APIDefinition models](APIDefinition.html#models).  # noqa: E501

        :param type: The type of this Parameter.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def format(self):
        """Gets the format of this Parameter.  # noqa: E501


        :return: The format of this Parameter.  # noqa: E501
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this Parameter.


        :param format: The format of this Parameter.  # noqa: E501
        :type: str
        """

        self._format = format

    @property
    def description(self):
        """Gets the description of this Parameter.  # noqa: E501


        :return: The description of this Parameter.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Parameter.


        :param description: The description of this Parameter.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def required(self):
        """Gets the required of this Parameter.  # noqa: E501

        Indicates that the parameter is required  # noqa: E501

        :return: The required of this Parameter.  # noqa: E501
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this Parameter.

        Indicates that the parameter is required  # noqa: E501

        :param required: The required of this Parameter.  # noqa: E501
        :type: bool
        """

        self._required = required

    @property
    def allow_multiple(self):
        """Gets the allow_multiple of this Parameter.  # noqa: E501

        Indicates that the parameter can be included multiple times (e.g. query or form)  # noqa: E501

        :return: The allow_multiple of this Parameter.  # noqa: E501
        :rtype: bool
        """
        return self._allow_multiple

    @allow_multiple.setter
    def allow_multiple(self, allow_multiple):
        """Sets the allow_multiple of this Parameter.

        Indicates that the parameter can be included multiple times (e.g. query or form)  # noqa: E501

        :param allow_multiple: The allow_multiple of this Parameter.  # noqa: E501
        :type: bool
        """

        self._allow_multiple = allow_multiple

    @property
    def items(self):
        """Gets the items of this Parameter.  # noqa: E501


        :return: The items of this Parameter.  # noqa: E501
        :rtype: SchemaObject
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this Parameter.


        :param items: The items of this Parameter.  # noqa: E501
        :type: SchemaObject
        """

        self._items = items

    @property
    def default_value(self):
        """Gets the default_value of this Parameter.  # noqa: E501

        Provides a default value for the parameter  # noqa: E501

        :return: The default_value of this Parameter.  # noqa: E501
        :rtype: str
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this Parameter.

        Provides a default value for the parameter  # noqa: E501

        :param default_value: The default_value of this Parameter.  # noqa: E501
        :type: str
        """

        self._default_value = default_value

    @property
    def schema(self):
        """Gets the schema of this Parameter.  # noqa: E501

        The response schema  # noqa: E501

        :return: The schema of this Parameter.  # noqa: E501
        :rtype: SchemaObject
        """
        return self._schema

    @schema.setter
    def schema(self, schema):
        """Sets the schema of this Parameter.

        The response schema  # noqa: E501

        :param schema: The schema of this Parameter.  # noqa: E501
        :type: SchemaObject
        """

        self._schema = schema

    @property
    def param_type(self):
        """Gets the param_type of this Parameter.  # noqa: E501

        The parameter type, e.g. query, form, path, body, header  # noqa: E501

        :return: The param_type of this Parameter.  # noqa: E501
        :rtype: str
        """
        return self._param_type

    @param_type.setter
    def param_type(self, param_type):
        """Sets the param_type of this Parameter.

        The parameter type, e.g. query, form, path, body, header  # noqa: E501

        :param param_type: The param_type of this Parameter.  # noqa: E501
        :type: str
        """

        self._param_type = param_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Parameter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Parameter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
