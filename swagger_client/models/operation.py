# coding: utf-8

"""
    API Manager API v1.3

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.3.0
    Contact: support@axway.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.error_response import ErrorResponse  # noqa: F401,E501
from swagger_client.models.parameter import Parameter  # noqa: F401,E501
from swagger_client.models.schema_object import SchemaObject  # noqa: F401,E501
from swagger_client.models.swagger_security_profile import SwaggerSecurityProfile  # noqa: F401,E501


class Operation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'title': 'str',
        'description': 'str',
        'format': 'str',
        'required': 'list[str]',
        'properties': 'dict(str, SchemaObject)',
        'items': 'SchemaObject',
        'example': 'object',
        'discriminator': 'str',
        'http_method': 'str',
        'nickname': 'str',
        'summary': 'str',
        'notes': 'str',
        'response_class': 'str',
        'error_responses': 'list[ErrorResponse]',
        'consumes': 'list[str]',
        'produces': 'list[str]',
        'authorizations': 'dict(str, list[object])',
        'tags': 'dict(str, list[str])',
        'security_profile': 'SwaggerSecurityProfile',
        'documentation_url': 'str',
        'cors': 'bool',
        'parameters': 'list[Parameter]',
        'ref': 'str',
        'default': 'object',
        'type': 'str',
        'enum': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'title': 'title',
        'description': 'description',
        'format': 'format',
        'required': 'required',
        'properties': 'properties',
        'items': 'items',
        'example': 'example',
        'discriminator': 'discriminator',
        'http_method': 'httpMethod',
        'nickname': 'nickname',
        'summary': 'summary',
        'notes': 'notes',
        'response_class': 'responseClass',
        'error_responses': 'errorResponses',
        'consumes': 'consumes',
        'produces': 'produces',
        'authorizations': 'authorizations',
        'tags': 'tags',
        'security_profile': 'securityProfile',
        'documentation_url': 'documentationUrl',
        'cors': 'cors',
        'parameters': 'parameters',
        'ref': '$ref',
        'default': 'default',
        'type': 'type',
        'enum': 'enum'
    }

    def __init__(self, id=None, title=None, description=None, format=None, required=None, properties=None, items=None, example=None, discriminator=None, http_method=None, nickname=None, summary=None, notes=None, response_class=None, error_responses=None, consumes=None, produces=None, authorizations=None, tags=None, security_profile=None, documentation_url=None, cors=False, parameters=None, ref=None, default=None, type=None, enum=None):  # noqa: E501
        """Operation - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._title = None
        self._description = None
        self._format = None
        self._required = None
        self._properties = None
        self._items = None
        self._example = None
        self._discriminator = None
        self._http_method = None
        self._nickname = None
        self._summary = None
        self._notes = None
        self._response_class = None
        self._error_responses = None
        self._consumes = None
        self._produces = None
        self._authorizations = None
        self._tags = None
        self._security_profile = None
        self._documentation_url = None
        self._cors = None
        self._parameters = None
        self._ref = None
        self._default = None
        self._type = None
        self._enum = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if title is not None:
            self.title = title
        if description is not None:
            self.description = description
        if format is not None:
            self.format = format
        if required is not None:
            self.required = required
        if properties is not None:
            self.properties = properties
        if items is not None:
            self.items = items
        if example is not None:
            self.example = example
        if discriminator is not None:
            self.discriminator = discriminator
        if http_method is not None:
            self.http_method = http_method
        if nickname is not None:
            self.nickname = nickname
        if summary is not None:
            self.summary = summary
        if notes is not None:
            self.notes = notes
        if response_class is not None:
            self.response_class = response_class
        if error_responses is not None:
            self.error_responses = error_responses
        if consumes is not None:
            self.consumes = consumes
        if produces is not None:
            self.produces = produces
        if authorizations is not None:
            self.authorizations = authorizations
        if tags is not None:
            self.tags = tags
        if security_profile is not None:
            self.security_profile = security_profile
        if documentation_url is not None:
            self.documentation_url = documentation_url
        if cors is not None:
            self.cors = cors
        if parameters is not None:
            self.parameters = parameters
        if ref is not None:
            self.ref = ref
        if default is not None:
            self.default = default
        if type is not None:
            self.type = type
        if enum is not None:
            self.enum = enum

    @property
    def id(self):
        """Gets the id of this Operation.  # noqa: E501

        An identifier  # noqa: E501

        :return: The id of this Operation.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Operation.

        An identifier  # noqa: E501

        :param id: The id of this Operation.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def title(self):
        """Gets the title of this Operation.  # noqa: E501

        Schema title  # noqa: E501

        :return: The title of this Operation.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Operation.

        Schema title  # noqa: E501

        :param title: The title of this Operation.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def description(self):
        """Gets the description of this Operation.  # noqa: E501

        Description of the Schema  # noqa: E501

        :return: The description of this Operation.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Operation.

        Description of the Schema  # noqa: E501

        :param description: The description of this Operation.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def format(self):
        """Gets the format of this Operation.  # noqa: E501

        The format ex: int32, int64, float, double, byte, binary, date, date-time or password  # noqa: E501

        :return: The format of this Operation.  # noqa: E501
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this Operation.

        The format ex: int32, int64, float, double, byte, binary, date, date-time or password  # noqa: E501

        :param format: The format of this Operation.  # noqa: E501
        :type: str
        """

        self._format = format

    @property
    def required(self):
        """Gets the required of this Operation.  # noqa: E501

        Specifies if the parameter is required  # noqa: E501

        :return: The required of this Operation.  # noqa: E501
        :rtype: list[str]
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this Operation.

        Specifies if the parameter is required  # noqa: E501

        :param required: The required of this Operation.  # noqa: E501
        :type: list[str]
        """

        self._required = required

    @property
    def properties(self):
        """Gets the properties of this Operation.  # noqa: E501

        Not used beacause our model does not support inline nested types  # noqa: E501

        :return: The properties of this Operation.  # noqa: E501
        :rtype: dict(str, SchemaObject)
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this Operation.

        Not used beacause our model does not support inline nested types  # noqa: E501

        :param properties: The properties of this Operation.  # noqa: E501
        :type: dict(str, SchemaObject)
        """

        self._properties = properties

    @property
    def items(self):
        """Gets the items of this Operation.  # noqa: E501

        if the schema is an array specifies the items type  # noqa: E501

        :return: The items of this Operation.  # noqa: E501
        :rtype: SchemaObject
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this Operation.

        if the schema is an array specifies the items type  # noqa: E501

        :param items: The items of this Operation.  # noqa: E501
        :type: SchemaObject
        """

        self._items = items

    @property
    def example(self):
        """Gets the example of this Operation.  # noqa: E501

        if the schema is an array specifies the items type  # noqa: E501

        :return: The example of this Operation.  # noqa: E501
        :rtype: object
        """
        return self._example

    @example.setter
    def example(self, example):
        """Sets the example of this Operation.

        if the schema is an array specifies the items type  # noqa: E501

        :param example: The example of this Operation.  # noqa: E501
        :type: object
        """

        self._example = example

    @property
    def discriminator(self):
        """Gets the discriminator of this Operation.  # noqa: E501


        :return: The discriminator of this Operation.  # noqa: E501
        :rtype: str
        """
        return self._discriminator

    @discriminator.setter
    def discriminator(self, discriminator):
        """Sets the discriminator of this Operation.


        :param discriminator: The discriminator of this Operation.  # noqa: E501
        :type: str
        """

        self._discriminator = discriminator

    @property
    def http_method(self):
        """Gets the http_method of this Operation.  # noqa: E501

        The HTTP method  # noqa: E501

        :return: The http_method of this Operation.  # noqa: E501
        :rtype: str
        """
        return self._http_method

    @http_method.setter
    def http_method(self, http_method):
        """Sets the http_method of this Operation.

        The HTTP method  # noqa: E501

        :param http_method: The http_method of this Operation.  # noqa: E501
        :type: str
        """

        self._http_method = http_method

    @property
    def nickname(self):
        """Gets the nickname of this Operation.  # noqa: E501

        The nickname of the operation  # noqa: E501

        :return: The nickname of this Operation.  # noqa: E501
        :rtype: str
        """
        return self._nickname

    @nickname.setter
    def nickname(self, nickname):
        """Sets the nickname of this Operation.

        The nickname of the operation  # noqa: E501

        :param nickname: The nickname of this Operation.  # noqa: E501
        :type: str
        """

        self._nickname = nickname

    @property
    def summary(self):
        """Gets the summary of this Operation.  # noqa: E501

        A short summary description of the operation  # noqa: E501

        :return: The summary of this Operation.  # noqa: E501
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this Operation.

        A short summary description of the operation  # noqa: E501

        :param summary: The summary of this Operation.  # noqa: E501
        :type: str
        """

        self._summary = summary

    @property
    def notes(self):
        """Gets the notes of this Operation.  # noqa: E501

        A detailed description of the operation  # noqa: E501

        :return: The notes of this Operation.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this Operation.

        A detailed description of the operation  # noqa: E501

        :param notes: The notes of this Operation.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def response_class(self):
        """Gets the response_class of this Operation.  # noqa: E501

        The return type of the method, e.g. void, array, or a type found in models  # noqa: E501

        :return: The response_class of this Operation.  # noqa: E501
        :rtype: str
        """
        return self._response_class

    @response_class.setter
    def response_class(self, response_class):
        """Sets the response_class of this Operation.

        The return type of the method, e.g. void, array, or a type found in models  # noqa: E501

        :param response_class: The response_class of this Operation.  # noqa: E501
        :type: str
        """

        self._response_class = response_class

    @property
    def error_responses(self):
        """Gets the error_responses of this Operation.  # noqa: E501

        A list of possible response messages and their meanings  # noqa: E501

        :return: The error_responses of this Operation.  # noqa: E501
        :rtype: list[ErrorResponse]
        """
        return self._error_responses

    @error_responses.setter
    def error_responses(self, error_responses):
        """Sets the error_responses of this Operation.

        A list of possible response messages and their meanings  # noqa: E501

        :param error_responses: The error_responses of this Operation.  # noqa: E501
        :type: list[ErrorResponse]
        """

        self._error_responses = error_responses

    @property
    def consumes(self):
        """Gets the consumes of this Operation.  # noqa: E501

        The content types that the operation consumes  # noqa: E501

        :return: The consumes of this Operation.  # noqa: E501
        :rtype: list[str]
        """
        return self._consumes

    @consumes.setter
    def consumes(self, consumes):
        """Sets the consumes of this Operation.

        The content types that the operation consumes  # noqa: E501

        :param consumes: The consumes of this Operation.  # noqa: E501
        :type: list[str]
        """

        self._consumes = consumes

    @property
    def produces(self):
        """Gets the produces of this Operation.  # noqa: E501

        The content types that the operation produces  # noqa: E501

        :return: The produces of this Operation.  # noqa: E501
        :rtype: list[str]
        """
        return self._produces

    @produces.setter
    def produces(self, produces):
        """Sets the produces of this Operation.

        The content types that the operation produces  # noqa: E501

        :param produces: The produces of this Operation.  # noqa: E501
        :type: list[str]
        """

        self._produces = produces

    @property
    def authorizations(self):
        """Gets the authorizations of this Operation.  # noqa: E501

        Authorizations  # noqa: E501

        :return: The authorizations of this Operation.  # noqa: E501
        :rtype: dict(str, list[object])
        """
        return self._authorizations

    @authorizations.setter
    def authorizations(self, authorizations):
        """Sets the authorizations of this Operation.

        Authorizations  # noqa: E501

        :param authorizations: The authorizations of this Operation.  # noqa: E501
        :type: dict(str, list[object])
        """

        self._authorizations = authorizations

    @property
    def tags(self):
        """Gets the tags of this Operation.  # noqa: E501

        The list of tags associated with this API operation. Each tag can have multiple values  # noqa: E501

        :return: The tags of this Operation.  # noqa: E501
        :rtype: dict(str, list[str])
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Operation.

        The list of tags associated with this API operation. Each tag can have multiple values  # noqa: E501

        :param tags: The tags of this Operation.  # noqa: E501
        :type: dict(str, list[str])
        """

        self._tags = tags

    @property
    def security_profile(self):
        """Gets the security_profile of this Operation.  # noqa: E501

        The security profile associated with the API Method. This profile will override the profile associated with the API  # noqa: E501

        :return: The security_profile of this Operation.  # noqa: E501
        :rtype: SwaggerSecurityProfile
        """
        return self._security_profile

    @security_profile.setter
    def security_profile(self, security_profile):
        """Sets the security_profile of this Operation.

        The security profile associated with the API Method. This profile will override the profile associated with the API  # noqa: E501

        :param security_profile: The security_profile of this Operation.  # noqa: E501
        :type: SwaggerSecurityProfile
        """

        self._security_profile = security_profile

    @property
    def documentation_url(self):
        """Gets the documentation_url of this Operation.  # noqa: E501

        The documentation URL for the operation  # noqa: E501

        :return: The documentation_url of this Operation.  # noqa: E501
        :rtype: str
        """
        return self._documentation_url

    @documentation_url.setter
    def documentation_url(self, documentation_url):
        """Sets the documentation_url of this Operation.

        The documentation URL for the operation  # noqa: E501

        :param documentation_url: The documentation_url of this Operation.  # noqa: E501
        :type: str
        """

        self._documentation_url = documentation_url

    @property
    def cors(self):
        """Gets the cors of this Operation.  # noqa: E501

        Indicates that the API is CORS enabled  # noqa: E501

        :return: The cors of this Operation.  # noqa: E501
        :rtype: bool
        """
        return self._cors

    @cors.setter
    def cors(self, cors):
        """Sets the cors of this Operation.

        Indicates that the API is CORS enabled  # noqa: E501

        :param cors: The cors of this Operation.  # noqa: E501
        :type: bool
        """

        self._cors = cors

    @property
    def parameters(self):
        """Gets the parameters of this Operation.  # noqa: E501

        A list of accepted parameters  # noqa: E501

        :return: The parameters of this Operation.  # noqa: E501
        :rtype: list[Parameter]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this Operation.

        A list of accepted parameters  # noqa: E501

        :param parameters: The parameters of this Operation.  # noqa: E501
        :type: list[Parameter]
        """

        self._parameters = parameters

    @property
    def ref(self):
        """Gets the ref of this Operation.  # noqa: E501

        A Reference to a definition on definitions object  # noqa: E501

        :return: The ref of this Operation.  # noqa: E501
        :rtype: str
        """
        return self._ref

    @ref.setter
    def ref(self, ref):
        """Sets the ref of this Operation.

        A Reference to a definition on definitions object  # noqa: E501

        :param ref: The ref of this Operation.  # noqa: E501
        :type: str
        """

        self._ref = ref

    @property
    def default(self):
        """Gets the default of this Operation.  # noqa: E501

        Default value for this schema if it is applicable  # noqa: E501

        :return: The default of this Operation.  # noqa: E501
        :rtype: object
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this Operation.

        Default value for this schema if it is applicable  # noqa: E501

        :param default: The default of this Operation.  # noqa: E501
        :type: object
        """

        self._default = default

    @property
    def type(self):
        """Gets the type of this Operation.  # noqa: E501

        The return type of the method, e.g. void, array, or a type found in models  # noqa: E501

        :return: The type of this Operation.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Operation.

        The return type of the method, e.g. void, array, or a type found in models  # noqa: E501

        :param type: The type of this Operation.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def enum(self):
        """Gets the enum of this Operation.  # noqa: E501


        :return: The enum of this Operation.  # noqa: E501
        :rtype: list[str]
        """
        return self._enum

    @enum.setter
    def enum(self, enum):
        """Sets the enum of this Operation.


        :param enum: The enum of this Operation.  # noqa: E501
        :type: list[str]
        """

        self._enum = enum

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Operation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Operation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
